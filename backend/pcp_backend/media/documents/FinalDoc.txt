Celery tasks & scheduling

from celery import shared_task
from django.utils import timezone
from .services import NotificationEvent, notify
from .models import NotificationPriority, NotificationType

@shared_task
def schedule_due_soon(task_id: str, project_id: str, assignee_ids: list[str], due_iso: str):
    """
    Entry point for reminder scheduling logic.

    We're trying to do the right thing even if Celery Beat didn't hit exactly 24h before due.
    If it's too late for that window, we send a "due soon" reminder now.
    If it's already overdue, we escalate with an overdue alert.
    """
    now = timezone.now()
    due_at = timezone.datetime.fromisoformat(due_iso).astimezone(timezone.utc)

    if now < due_at and (due_at - timezone.timedelta(hours=24)) <= now:
        # We're inside the 24h window but missed the perfect fire time — send now anyway
        evt = NotificationEvent(
            type=NotificationType.DUE_SOON_REMINDER,
            project_id=project_id,
            actor_user_id=None,
            title="Task due in 24 hours",
            message="A task assigned to you is due soon. Please review and complete.",
            task_id=task_id,
            action_url=f"/projects/{project_id}/tasks/{task_id}",
            idempotency_key=f"dueSoon:{task_id}:{now.strftime('%Y%m%d%H')}",
            explicit_recipient_user_ids=assignee_ids
        )
        notify(evt)

    elif now >= due_at:
        # Oops, it's overdue — escalate
        evt = NotificationEvent(
            type=NotificationType.OVERDUE_REMINDER,
            project_id=project_id,
            actor_user_id=None,
            title="Task overdue",
            message="This task is now overdue. Please take action or request an extension.",
            task_id=task_id,
            action_url=f"/projects/{project_id}/tasks/{task_id}",
            idempotency_key=f"overdue:{task_id}:{now.strftime('%Y%m%d%H')}",
            force_priority=NotificationPriority.CRITICAL,
            explicit_recipient_user_ids=assignee_ids
        )
        notify(evt)

    # If it's more than 24h out, we assume Celery Beat will handle this later — nothing to do yet.


@shared_task
def fire_due_soon(task_id: str, project_id: str, assignee_ids: list[str]):
    """
    Called *exactly* at dueAt - 24h (ideally).
    Shouldn't need any further checking.
    """
    evt = NotificationEvent(
        type=NotificationType.DUE_SOON_REMINDER,
        project_id=project_id,
        actor_user_id=None,
        title="Task due in 24 hours",
        message="A task assigned to you is due soon. Please review and complete.",
        task_id=task_id,
        action_url=f"/projects/{project_id}/tasks/{task_id}",
        idempotency_key=f"dueSoon:{task_id}:{timezone.now().strftime('%Y%m%d%H')}",
        explicit_recipient_user_ids=assignee_ids
    )
    notify(evt)


@shared_task
def fire_overdue(task_id: str, project_id: str, assignee_ids: list[str]):
    """
    For tasks that are past due.
    Usually fired if schedule_due_soon realized it's too late.
    """
    evt = NotificationEvent(
        type=NotificationType.OVERDUE_REMINDER,
        project_id=project_id,
        actor_user_id=None,
        title="Task overdue",
        message="This task is now overdue. Please take action or request an extension.",
        task_id=task_id,
        action_url=f"/projects/{project_id}/tasks/{task_id}",
        idempotency_key=f"overdue:{task_id}:{timezone.now().strftime('%Y%m%d%H')}",
        force_priority=NotificationPriority.CRITICAL,
        explicit_recipient_user_ids=assignee_ids
    )
    notify(evt)

